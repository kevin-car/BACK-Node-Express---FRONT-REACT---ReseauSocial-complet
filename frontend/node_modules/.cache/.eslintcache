[{"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/index.js":"1","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/App.js":"2","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/postMessage/postMessage.js":"3","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/components/bouton/bouton.js":"4","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/components/bouton/input.js":"5","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/pageMessages.js":"6","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/modifyMessage/modifyMessage.js":"7","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/pageProfil/pageProfil.js":"8","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/components/entete/entete.js":"9","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/connexion/connexion.js":"10","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/connexion/inscription/inscription.js":"11","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/connexion/Connexion.js":"12","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/pageProfil/updatePassword/updatePassword.js":"13","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/cadreUtilisateur/cadreUtilisateur.js":"14"},{"size":199,"mtime":1632814817420,"results":"15","hashOfConfig":"16"},{"size":913,"mtime":1634132122867,"results":"17","hashOfConfig":"16"},{"size":2641,"mtime":1635924136801,"results":"18","hashOfConfig":"16"},{"size":332,"mtime":1634545074633,"results":"19","hashOfConfig":"16"},{"size":272,"mtime":1634545079222,"results":"20","hashOfConfig":"16"},{"size":16198,"mtime":1636018530150,"results":"21","hashOfConfig":"16"},{"size":8789,"mtime":1636014992054,"results":"22","hashOfConfig":"16"},{"size":14818,"mtime":1636106131105,"results":"23","hashOfConfig":"16"},{"size":1794,"mtime":1634734045042,"results":"24","hashOfConfig":"16"},{"size":2408,"mtime":1632824391187,"results":"25","hashOfConfig":"16"},{"size":11643,"mtime":1635936352542,"results":"26","hashOfConfig":"16"},{"size":4589,"mtime":1634892899233,"results":"27","hashOfConfig":"16"},{"size":3986,"mtime":1636105550797,"results":"28","hashOfConfig":"16"},{"size":1796,"mtime":1635960418104,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"nhgg3o",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/index.js",[],["63","64"],"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/App.js",[],"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/postMessage/postMessage.js",["65"],"import React from \"react\";\nimport classes from \"./postMessage.module.css\"\nimport Input from \"../../components/bouton/input\";\nimport Bouton from \"../../components/bouton/bouton\";\n\n\nclass PostMessages extends React.Component {\n\n    state = {\n        fileSelected : \"\",\n        fileSelectedName : \"\", \n    }  \n  \n    fileSelected = (event) => {\n        // mettre l'image dans le state pour l'affichage de l'aperçu\n       this.setState({fileSelected : URL.createObjectURL(event.target.files[0])})\n\n       // mettre le nom de l'image dans le state pour le renvoyer au composant supérieur \n       const File = (event.target.files[0])\n       this.setState({fileSelectedName : File})\n    }\n\n    handleDeletePhoto = () => {\n        this.myFormRef.reset();\n        this.setState({fileSelected : \"\"})\n        this.setState({fileSelectedName : \"\"})\n    }\n\n    render(){\n        const classBloc = `${classes.blocFormulaire} container w-100 `\n        const imageUploaded = this.state.fileSelectedName\n        return (\n            <form className={classBloc}>\n                <div className='row'>\n                <label htmlFor=\"exampleTextarea\" className=\"form-label mt-4\">Ecrivez votre message et cliquez sur postez pour qu'il se rajoute aux posts du forum</label>\n                    <div className=\"form-group col-8\">\n                        <textarea  \n                        className=\"form-control\" \n                        id=\"exampleTextarea\" rows=\"3\" \n                        value={this.props.value}\n                        onChange={this.props.onChange}\n                        maxLength='255'\n                        />\n\n                    </div>\n                    <div className=\"form-group col-4\">\n                            <div ref={(el) => this.myFormRef = el}>\n                                <Input type=\"file\" onChange={event => this.fileSelected(event)}> Parcourir</Input>\n                            </div>\n                            <div ref={(el) => this.myFormRef = el}>\n                                <Bouton couleur=\"primary\" type=\"button\" clic={() => this.props.envoi(imageUploaded, this.myFormRef)}> Envoyer </Bouton> \n                            </div>\n                            \n                            <div className='row w-auto'>\n                                <img className=\"w-auto\" src={this.state.fileSelected}/>\n                                {this.state.fileSelected && <i onClick={this.handleDeletePhoto} className=\"fas fa-times align-top\"></i>}\n                            </div>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n\nexport default PostMessages","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/components/bouton/bouton.js",[],"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/components/bouton/input.js",[],"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/pageMessages.js",["66","67"],"import React from \"react\";\nimport Entete from \"../components/entete/entete\";\nimport PostMessages from \"./postMessage/postMessage\";\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\nimport Connexion from \"./connexion/Connexion.js\";\nimport classes from \"./pageMessages.module.css\"\n\nimport {Redirect } from 'react-router-dom'\nimport CadreUtilisateur from \"./cadreUtilisateur/cadreUtilisateur\";\n\nclass PageMessage extends React.Component {\n\n    state = {\n\n        //Affichage des messages\n        ilLoaded : false,\n        messagess : [],\n        \n        //Post\n        imageSaisi : \"\",\n        auteurSaisi : \"\",\n        messageSaisi : \"\",\n        createdAtSaisi : \"\",\n        updatedAtSaisi : \"\",\n        id : 0,\n\n        // Gestion des images \n        selectedFile : null,\n\n        // affichage d'une image dans le post \n        postImage : \"\",\n\n        // Affichage d'une bannière de message\n        banniere : \"\",\n\n        // Pour raffrachir la page\n        refresh : false,\n        pseudoUtilisateur : \"\"\n    }\n\n    // Fonction de liaison avec la BDD\n    componentDidMount = () => {\n        // Appeler tous les messages dans la BDD \n        axios.get(\"http://localhost:8000/\", {headers: {\"x-access-token\": localStorage.getItem(\"token\"), \"id\": localStorage.getItem(\"id\")} })\n        .then(reponse => {\n            const messagess = reponse.data.data.map(message => {\n                return{\n                    id: message.id,\n                    auteur: message.auteur,\n                    photo: message.photo,\n                    message: message.message,\n                    createdAt: message.createdAt,\n                    updatedAt: message.updatedAt,\n                    created : message.created\n                }\n        })\n        this.setState({messagess})\n    })    \n        .catch(error => {\n            console.log(error)\n        },1000)\n\n        // Mettre à jour l'heure actuelle dans les states\n        setInterval( () => {\n            this.setState({\n              createdAtSaisi : Date.now() - (7 * 24 * 60 * 60 * 1000),\n              updatedAtSaisi : Date.now() - (7 * 24 * 60 * 60 * 1000),\n              created : Date.now() - (7 * 24 * 60 * 60 * 1000)\n            })\n\n            axios.get(\"http://localhost:8000/\", {headers: {\"x-access-token\": localStorage.getItem(\"token\"), \"id\": localStorage.getItem(\"id\")} })\n            .then(reponse => {\n                const messagess = reponse.data.data.map(message => {\n                    return{\n                        id: message.id,\n                        auteur: message.auteur,\n                        photo: message.photo,\n                        message: message.message,\n                        createdAt: message.createdAt,\n                        updatedAt: message.updatedAt,\n                        created : message.created,\n                    }\n            })\n            this.setState({messagess})\n        })\n            .catch(error => {\n                console.log(\"en attente de connexion pour chargement des données\")\n            },1000)\n          },1000)\n          // Demander le pseudonyme utilisateur grâce à l'id et le mettre dans les states\n          if(localStorage.id > 0){\n                const id = localStorage.id\n                axios.get(`http://localhost:8000/getProfil/${id}`, {headers: {\"x-access-token\": localStorage.getItem(\"token\"), \"id\": localStorage.getItem(\"id\")} })\n                .then(reponse => {\n                    console.log(reponse)\n                    this.setState({auteurSaisi : reponse.data.user.pseudonyme})\n                })\n          } \n    }\n\n    // Poster un nouveau message \n    postMessages = (imageUploaded, myFormRef) => {\n        if(imageUploaded === \"\"){\n            console.log(\"l'image envoyée \", imageUploaded)\n            /* Je prépare mon nouveau message pour les states et la base de données */\n            const newMessage = {\n                message : this.state.messageSaisi,\n                photo : '',\n                auteur : localStorage.id,\n                createdAt : this.state.createdAtSaisi,\n                updatedAt : this.state.updatedAtSaisi,\n                created : this.state.createdAtSaisi,\n            }\n            /* Envoi vers la base de donnée */\n            \n            axios.post('http://localhost:8000/createMessage/', newMessage, {headers: {\"x-access-token\": localStorage.getItem(\"token\"), \"id\": localStorage.getItem(\"id\")}})    \n            // Rafrachissement de la page \n            this.setState({refresh : true})\n                 } else { // S'il y a une image, j'importe l'image via une seconde route\n                const ImageName = Date.now() + imageUploaded.name.split(\" \").join(\"_\")\n                const fd = new FormData()\n                fd.append('image', imageUploaded, ImageName)\n                               \n                axios.post(\"http://localhost:8000/uploadPhoto/\", fd )\n                    .then(res => { // J'utilise le retour de cette image \n                            const newMessage = {\n                                message : this.state.messageSaisi,\n                                photo : res.data.nom,\n                                auteur : localStorage.id,\n                                createdAt : this.state.createdAtSaisi,\n                                updatedAt : this.state.updatedAtSaisi,\n                                created : this.state.createdAtSaisi\n                            }\n                            /* Envoi vers la base de donnée */\n                            axios.post('http://localhost:8000/createMessage/', newMessage, {headers: {\"x-access-token\": localStorage.getItem(\"token\"), \"id\": localStorage.getItem(\"id\")} } ) \n                    })\n                }\n                axios.get(\"http://localhost:8000/\", {headers: {\"x-access-token\": localStorage.getItem(\"token\"), \"id\": localStorage.getItem(\"id\")} })\n                .then(reponse => {\n                    const messagess = reponse.data.data.map(message => {\n                        return{\n                            id: message.id,\n                            auteur: message.auteur,\n                            photo: message.photo,\n                            message: message.message,\n                            createdAt: message.createdAt,\n                            updatedAt: message.updatedAt,\n                            created : message.created\n                        }\n                })\n                this.setState({messagess})\n                })    \n                .catch(error => {\n                    console.log(error)\n                },1000)\n                this.setState({refresh : true})\n            }                           \n\n    // Supprimer un message\n    HandleDeleteMessage = (id) => {\n        // Récupérer l'id \n        const messageIndex = this.state.messagess.findIndex(l => {\n            return l.id === id\n        })\n        console.log(id)\n        // 2 Suppression de la photo dans le serveur \n            axios.get(`http://localhost:8000/deletePhotoMessage/${id} `,{headers: {\"x-access-token\": localStorage.getItem(\"token\"), \"id\": localStorage.getItem(\"id\")} })\n            .catch(error => {\n                console.log(error)\n            })\n\n\n        //Supprime dans la base de donnée\n        const pathWithID = `http://localhost:8000/delete/${id}`\n        console.log(pathWithID, \"l'id supprimé :\", id)\n        axios.delete(pathWithID, {headers: {\"x-access-token\": localStorage.getItem(\"token\"), \"id\": localStorage.getItem(\"id\") } }, {\n             data: { id: id },\n        });\n        // J'informe l'utilisateur que le message est bien supprimé\n        this.setState({banniere : 'Vous avez bien supprimé ce message'})\n        setTimeout(() => {\n            setTimeout(this.setState({banniere : ''}))\n        }, 3000);\n\n                // Supprime dans les states\n                const newmessagess = [...this.state.messagess]      \n                this.setState({messagess : newmessagess})\n    }\n\n    Connect = (data) => {\n        axios.post(\"http://localhost:8000/User/login\", data)\n            .then(res => {           \n                // Enregistrer l'id dans le local storage \n                localStorage.id = res.data.data\n                localStorage.token = res.data.token\n                localStorage.sexe = res.data.sexe\n                this.setState({pseudoUtilisateur : res.data.pseudonyme})\n                // Modifier le state pour afficher les postes \n                this.setState({display : true})\n                console.log(res);\n          })  \n          .catch(res => {\n            if(res.request.status === 401) {\n                console.log(\"l'utilisateur n'existe pas\")\n                alert(\"Cet utilisateur n'existe pas\")\n            }\n            if(res.request.status === 402) {\n                console.log(\"le mot de passe est incorrect\")\n                alert(\"Votre mot de passe saisi est incorrect\")\n            }\n            console.log(res.request.status)\n          })\n    }\n    \n    // Affichage des boutons Modifier Et Supprimer\n    displayModifyAndDelete = (auteur, id) => {\n        if( parseInt(localStorage.id) === auteur || parseInt(localStorage.id) === 1 ){\n            return (\n                <div className=\"btn-group col-1 h-25 \" role=\"group\" aria-label=\"Button group with nested dropdown\">\n                <button type=\"button\" className=\"btn btn-dark\">Actions</button>\n                <div className=\"btn-group\" role=\"group\">\n                    <button id=\"btnGroupDrop4\" type=\"button\" className=\"btn btn-dark dropdown-toggle\" value={id} data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></button>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop4\" >\n                            <Link \n                                to={{\n                                    pathname : \"/ModifyMessage/\"+(id),\n                                    }} \n                                className=\"dropdown-item\"\n                                >\n                                Modifier le message \n                            </Link> \n                       <button className=\"dropdown-item\"  onClick={() => this.HandleDeleteMessage(id)} >Supprimer le message</button>                                             \n                    </div>\n                </div>\n        </div>\n            )\n        }\n    }\n\n    render(){\n        if(localStorage.id == null){ \n            return (    \n                <Connexion \n                    Connect={(data) => this.Connect(data)}\n                    banniere={this.state.banniere}\n                />\n            )\n        }else {\n\n        return(\n            <>\n                {/* Pour raffrachir la page */} \n                {this.state.refresh && <Redirect to='/' />}\n                {<Redirect to='/accueil' />}\n\n                <Entete \n                    clic={() => this.deconnect()}\n                /> \n            {this.state.banniere !== \"\" \n            &&             \n                <div className=\"alert alert-dismissible alert-warning\">\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n                    <p className=\"mb-0\">{this.state.banniere}</p>\n                </div>\n            }\n\n                <form ref={(el) => this.myFormRef = el}>\n                    <PostMessages \n                        envoi={(imageUploaded) => this.postMessages(imageUploaded)}\n                        value={this.state.messageSaisi}\n                        onChange={(event) => this.setState({messageSaisi:event.target.value})}\n                        banniere={this.state.banniere}\n                    />\n                </form>        \n\n                {/* Affichage de tous les messages postés du plus récent au plus vieux ! */} \n\n                {this.state.messagess.slice(0).reverse().map((message, index) => {\n                    const lienImage = `http://localhost:8000/images/${message.photo}`\n                    return(\n                        <div className=\"container\">\n                            <div className=\"row pull-left\">\n                                <div className=\" card border-info mb-3 w-75 col-10\"  >\n                                    <div className=\"card-header text-center\">\n                                        {\"Message envoyé le : \"+message.createdAt.replace(/T/g, \"  à \").replace(/.000Z/g, \" \")}\n                                            <div>\n                                        {message.createdAt !== message.updatedAt && \"Message modifié le : \"+message.updatedAt.replace(/T/g, \"  à \").replace(/.000Z/g, \" \")}\n                                        </div>\n                                    </div>\n                                    <div className=\"container\">\n                                        <div className=\"card-body row\">\n                                            {/* cadre utilisateur */}\n                                            <div className=\" col-sm-12 col-md-4 col-lg-3 col-xl-2 xxl-6\">\n                                                <CadreUtilisateur\n                                                    id={message.auteur}\n                                                    photo={message.photo}\n                                                />  \n                                            </div>\n                                            {/* Message */}\n                                            <div className=\"card text-white col-sm-12 col-md-8 col-lg-5 col-xl-6 xxl-6\" >\n                                                <img src={this.displayImage} alt=\"\" />\n                                                <p className=\"card-text\">{message.message}</p>\n                                            </div>\n                                            {/* Photo du post  */}\n                                            <div className=\"col-sm-12 col-md-12 col-lg-4 col-xl-4 xxl-6\">\n                                                <img src={lienImage} alt=\"\" />\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                                {/* Bloc menu déroulant des Actions : Modifier et Supprimer */}\n                                {this.displayModifyAndDelete(message.auteur, message.id)}\n\n{/*                                 { parseInt(localStorage.id) === message.auteur  && \n                                    <div className=\"btn-group col-1 h-25 \" role=\"group\" aria-label=\"Button group with nested dropdown\">\n                                    <button type=\"button\" className=\"btn btn-dark\">Actions</button>\n                                    <div className=\"btn-group\" role=\"group\">\n                                        <button id=\"btnGroupDrop4\" type=\"button\" className=\"btn btn-dark dropdown-toggle\" value={message.id} data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></button>\n                                        <div className=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop4\" >\n                                                <Link \n                                                    to={{\n                                                        pathname : \"/ModifyMessage/\"+(message.id),\n                                                        }} \n                                                    className=\"dropdown-item\"\n                                                    >\n                                                    Modifier le message \n                                                </Link> \n                                           <button className=\"dropdown-item\"  onClick={() => this.HandleDeleteMessage(message.id)} >Supprimer le message</button>                                             \n                                        </div>\n                                    </div>\n                                </div>\n                                } */}\n                        </div>\n                    </div> \n                    )\n                })}\n            </>\n            )\n        }    \n    }\n}\n\n\n\nexport default PageMessage\n","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/modifyMessage/modifyMessage.js",[],"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/pageProfil/pageProfil.js",["68","69","70","71"],"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/components/entete/entete.js",[],"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/connexion/connexion.js",["72","73","74","75"],"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/connexion/inscription/inscription.js",[],"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/connexion/Connexion.js",["76","77"],"import React from \"react\";\nimport classes from \"./connexion.module.css\"\nimport { Link } from 'react-router-dom'\nimport {withFormik} from \"formik\"\nimport * as Yup from \"yup\"\n\n\nclass Connexion extends React.Component {\n    \n    state = {\n        adresseMail : \"\",\n        password : \"\",\n        banniere : this.props.banniere\n        }\n\n    render(){\n   \n            return (\n            <>\n            {this.props.banniere != \"\" \n            &&             \n                <div class=\"alert alert-dismissible alert-warning\">\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n                    <h3 class=\"alert-heading\">Warning!</h3>\n                    <p class=\"mb-0\">{this.props.banniere}</p>\n                </div>\n            }\n\n            <form>\n                {/* le logo */}\n                <div className=\"container  col-lg-6 col-md-8 col-sm-10 col-xs-12\">\n                <div className=\"container text-center \">\n                    <div className=\"row\">\n                        <div className=\" container col-7\">\n                            <img src=\"http://localhost:8000/images/utils/icon-left-font-monochrome-white.png\" alt=\"\" />\n                        </div>\n                    </div>\n                </div>\n\n                    <div className=\" mt-4 text-center text-success\">\n                        <h2> CONNEXION</h2>\n                    </div>                    \n                    <div className=\"form-group \">\n                        <label>Adresse Email</label>\n                        <input value={this.props.values.adresseMail} onBlur={this.props.handleBlur} name=\"adresseMail\" onChange={this.props.handleChange} type=\"string\" className=\"form-control\" placeholder=\"Enter email\" />\n                        {this.props.touched.adresseMail && this.props.errors.adresseMail &&  <span style={{color:\"red\"}}> {this.props.errors.adresseMail} </span>}\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Mot de Passe</label>\n                        <input value={this.props.values.password} onBlur={this.props.handleBlur} name=\"password\" onChange={this.props.handleChange}  type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\n                        {this.props.touched.password === true && this.props.errors.password &&  <span style={{color:\"red\"}}> {this.props.errors.password} </span>}\n\n                    </div>\n\n                    <div className=\"form-group \">\n                        <div className=\"custom-control custom-checkbox\">\n                            <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Enregistrer les identifiants </label>\n                        </div>\n                    </div>\n                    <div className=\" text-center\">\n                        <button className=\"btn btn-dark btn-lg btn-block \" onClick={this.props.handleSubmit}>Connexion</button>\n                    </div>  \n                    <div className=\" mt-4 text-center text-success\">\n                        <h2> PAS ENCORE INSCRIT - CLIQUEZ ICI</h2>\n                    </div>\n\n                    <div className=\" text-center \">\n                        <button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\" >\n                            <Link \n                                to={{\n                                    pathname : \"/Inscription\"\n                                    }} \n                                className=\"dropdown-item\" \n                                >\n                                Inscription\n                            </Link> \n                        </button>\n                    </div>\n                </div>\n            </form>\n            </>\n        )\n    }\n}\nexport default withFormik({\n\n    mapPropsToValues : () => ({\n        adresseMail : \"\",\n        password : \"\",\n    }),\n    validationSchema : Yup.object().shape({\n        adresseMail : Yup.string()\n        .email(\"Ceci ne ressemble à une adresse email. Merci d'insérer votre adresse mail\")\n        .required(\"le champ adresse Mail est obligatoire pour se connecter\"),\n        password : Yup.string()\n        .required(\"Le champ mot de passe est obligatoire pour se connecter\")\n    }),\n    handleSubmit : (values, {props}) => {\n        const data = {\n            \"adresseMail\" : values.adresseMail,\n            \"password\" : values.password\n        }\n        props.Connect((data))\n    }\n    \n    })(Connexion)\n","/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/pageProfil/updatePassword/updatePassword.js",["78","79","80"],"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/cadreUtilisateur/cadreUtilisateur.js",["81"],"import React from \"react\"\nimport axios from \"axios\"\n\nclass CadreUtilisateur extends React.Component {\n    state = {\n        userPhoto : \"\", \n        userName : \"\",\n        sexe : \"\"\n\n    }\n\n    componentDidMount = () => {\n        axios.get(`http://localhost:8000/getProfil/${this.props.id}`, {headers: {\"x-access-token\": localStorage.getItem(\"token\"), \"id\": localStorage.getItem(\"id\")} })// Modifier l'id avec la valeur des props\n        .then (res => {\n             this.setState({userPhoto : res.data.user.photoPresentation})\n             this.setState({userName : res.data.user.pseudonyme})\n             this.setState({sexe : res.data.user.sexe})\n        })      \n        .catch (error => {\n            this.setState({userPhoto : \"\"})\n            this.setState({userName : \"Utilisateur Supprimé\"})\n            this.setState({sexe : \"\"})\n        })\n    }\n\n    render(){\n        return(\n            <div className={this.state.sexe === \"Homme\" ? \"cadreUser card border-info mb-3\" : \"cadreUser card border-danger mb-3\"}>\n                <p className={this.state.sexe === \"Homme\" ? \"text-center text-info\" : \"text-center text-danger\"}>{this.state.userName}</p>\n                { this.state.userPhoto !== \"\" && <img className=\"imgPerso\" alt={`photo de profil de ${this.state.userName}` }src={`http://localhost:8000/images/${this.state.userPhoto}`}  />}\n                {localStorage.sexe === \"Femme\" && this.state.userPhoto === \"\" && <img src={'http://localhost:8000/images/utils/persoStandards/femme.jpg'} alt=\"Profil de Marge Simpson\" />}\n                {localStorage.sexe === \"Homme\" && this.state.userPhoto === \"\" && <img src={'http://localhost:8000/images/utils/persoStandards/homme.jpg'} alt=\"Profil de Homer Simpson\" />}\n            </div>\n        )\n    }\n}\n\nexport default CadreUtilisateur",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":55,"column":33,"nodeType":"88","endLine":55,"endColumn":88},{"ruleId":"89","severity":1,"message":"90","line":7,"column":8,"nodeType":"91","messageId":"92","endLine":7,"endColumn":15},{"ruleId":"89","severity":1,"message":"93","line":163,"column":15,"nodeType":"91","messageId":"92","endLine":163,"endColumn":27},{"ruleId":"89","severity":1,"message":"94","line":7,"column":10,"nodeType":"91","messageId":"92","endLine":7,"endColumn":18},{"ruleId":"95","severity":1,"message":"96","line":120,"column":28,"nodeType":"97","messageId":"98","endLine":120,"endColumn":30},{"ruleId":"99","severity":1,"message":"100","line":225,"column":78,"nodeType":"88","endLine":225,"endColumn":164},{"ruleId":"99","severity":1,"message":"100","line":228,"column":56,"nodeType":"88","endLine":228,"endColumn":155},{"ruleId":"89","severity":1,"message":"90","line":2,"column":8,"nodeType":"91","messageId":"92","endLine":2,"endColumn":15},{"ruleId":"89","severity":1,"message":"101","line":15,"column":15,"nodeType":"91","messageId":"92","endLine":15,"endColumn":26},{"ruleId":"89","severity":1,"message":"102","line":16,"column":15,"nodeType":"91","messageId":"92","endLine":16,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":40,"column":32,"nodeType":"88","endLine":40,"endColumn":44},{"ruleId":"89","severity":1,"message":"90","line":2,"column":8,"nodeType":"91","messageId":"92","endLine":2,"endColumn":15},{"ruleId":"95","severity":1,"message":"105","line":20,"column":34,"nodeType":"97","messageId":"98","endLine":20,"endColumn":36},{"ruleId":"106","severity":1,"message":"107","line":19,"column":157,"nodeType":"108","messageId":"109","endLine":19,"endColumn":168},{"ruleId":"106","severity":1,"message":"107","line":19,"column":249,"nodeType":"108","messageId":"109","endLine":19,"endColumn":270},{"ruleId":"106","severity":1,"message":"107","line":34,"column":106,"nodeType":"108","messageId":"109","endLine":34,"endColumn":133},{"ruleId":"99","severity":1,"message":"100","line":30,"column":50,"nodeType":"88","endLine":30,"endColumn":190},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'classes' is defined but never used.","Identifier","unusedVar","'messageIndex' is assigned a value but never used.","'Redirect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'AdresseMail' is assigned a value but never used.","'Password' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation"]