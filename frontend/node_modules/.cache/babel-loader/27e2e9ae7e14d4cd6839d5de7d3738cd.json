{"ast":null,"code":"var _jsxFileName = \"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/pageMessages.js\";\nimport React from \"react\";\nimport Entete from \"../components/entete/entete\";\nimport PostMessages from \"./postMessage/postMessage\";\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport classes from \"./pageMessages.module.css\";\nimport Connexion from \"./connexion/Connexion.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass PageMessage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //Affichage des messages\n      ilLoaded: false,\n      messagess: [],\n      //Post\n      imageSaisi: \"\",\n      auteurSaisi: \"Kévin\",\n      messageSaisi: \"\",\n      createdAtSaisi: \"\",\n      updatedAtSaisi: \"\",\n      id: 0,\n      // Gestion des images \n      selectedFile: null,\n      // affichage d'une image dans le post \n      postImage: \"\",\n      // Connexion \n      display: false,\n      userConnected: \"\",\n      password: \"\",\n      idUserConnected: 0\n    };\n\n    this.componentDidMount = () => {\n      // Appeler tous les messages dans la BDD \n      axios.get(\"http://localhost:8000/\").then(reponse => {\n        const messagess = reponse.data.data.map(message => {\n          return {\n            id: message.id,\n            auteur: message.auteur,\n            photo: message.photo,\n            message: message.message,\n            createdAt: message.createdAt,\n            updatedAt: message.updatedAt,\n            created: message.created\n          };\n        });\n        this.setState({\n          messagess\n        });\n      }).catch(error => {\n        console.log(error);\n      }, 1000); // Mettre à jour l'heure actuelle dans les states\n\n      setInterval(() => {\n        this.setState({\n          createdAtSaisi: Date.now() - 7 * 24 * 60 * 60 * 1000,\n          updatedAtSaisi: Date.now() - 7 * 24 * 60 * 60 * 1000,\n          created: Date.now() - 7 * 24 * 60 * 60 * 1000\n        });\n        axios.get(\"http://localhost:8000/\").then(reponse => {\n          const messagess = reponse.data.data.map(message => {\n            return {\n              id: message.id,\n              auteur: message.auteur,\n              photo: message.photo,\n              message: message.message,\n              createdAt: message.createdAt,\n              updatedAt: message.updatedAt,\n              created: message.created\n            };\n          });\n          this.setState({\n            messagess\n          });\n        }).catch(error => {\n          console.log(error);\n        }, 1000);\n      }, 1000);\n    };\n\n    this.postMessages = imageUploaded => {\n      if (imageUploaded === \"\") {\n        console.log(\"l'image envoyée \", imageUploaded);\n        /* Je prépare mon nouveau message pour les states et la base de données */\n\n        const newMessage = {\n          message: this.state.messageSaisi,\n          photo: 'photo pourrie',\n          auteur: this.state.auteurSaisi,\n          createdAt: this.state.createdAtSaisi,\n          updatedAt: this.state.updatedAtSaisi,\n          created: this.state.createdAtSaisi\n        };\n        /* Envoi vers la base de donnée */\n\n        axios.post('http://localhost:8000/createMessage/', newMessage);\n      } else {\n        // S'il y a une image, j'importe l'image via une seconde route\n        const ImageName = Date.now() + imageUploaded.name.split(\" \").join(\"_\");\n        console.log(\"ImageName\", ImageName);\n        const fd = new FormData();\n        fd.append('image', imageUploaded, ImageName);\n        console.log('fd', fd);\n        axios.post(\"http://localhost:8000/upload/\", fd).then(res => {\n          // J'utilise le retour de cette image \n          console.log(\"1er retour : \", res);\n          const nomImage = imageUploaded.name;\n          console.log(nomImage);\n          const newMessage = {\n            message: this.state.messageSaisi,\n            photo: res.data.nom,\n            auteur: this.state.auteurSaisi,\n            createdAt: this.state.createdAtSaisi,\n            updatedAt: this.state.updatedAtSaisi,\n            created: this.state.createdAtSaisi\n          };\n          /* Envoi vers la base de donnée */\n\n          axios.post('http://localhost:8000/createMessage/', newMessage);\n        });\n      }\n    };\n\n    this.HandleDeleteMessage = id => {\n      const messageIndex = this.state.messagess.findIndex(l => {\n        return l.id === id;\n      });\n      console.log(id); // Supprime dans les states\n\n      const newmessagess = [...this.state.messagess];\n      newmessagess.splice(messageIndex, 1);\n      this.setState({\n        messagess: newmessagess\n      }); //Supprime dans la base de donnée\n\n      const pathWithID = `http://localhost:8000/delete/${id}`;\n      console.log(pathWithID, \"l'id supprimé :\", id);\n      axios.delete(pathWithID, {\n        data: {\n          id: id\n        }\n      });\n    };\n\n    this.Connect = Ids => {\n      axios.post(\"http://localhost:8000/User/login\", data).then(res => {\n        console.log(res.data);\n\n        if (res.status === 200) {\n          // Enregistrer l'id dans le local storage \n          localStorage.id = res.data.userId;\n          localStorage.token = res.data.token; // Modifier le state pour afficher les postes \n\n          this.setState({\n            display: true\n          });\n        }\n      });\n    };\n\n    this.deconnect = () => {// Vider le local storage \n      // display a none\n    };\n  }\n\n  render() {\n    if (!this.state.display) {\n      return /*#__PURE__*/_jsxDEV(Connexion, {\n        Connect: Ids => this.Connect(Ids)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Entete, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PostMessages, {\n          envoi: imageUploaded => this.postMessages(imageUploaded),\n          value: this.state.messageSaisi,\n          onChange: event => this.setState({\n            messageSaisi: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 17\n        }, this), this.state.messagess.slice(0).reverse().map((message, index) => {\n          const lienImage = `http://localhost:8000/images/${message.photo}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: this.props.id,\n            className: \"container \",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row pull-left\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \" card border-success mb-3 w-75 col-10\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-header\",\n                  children: message.createdAt\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"card-title\",\n                    children: message.auteur\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 212,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"card-text\",\n                    children: message.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: lienImage,\n                    alt: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"btn-group col-1 h-25 \",\n                role: \"group\",\n                \"aria-label\": \"Button group with nested dropdown\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn btn-dark\",\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"btn-group\",\n                  role: \"group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    id: \"btnGroupDrop4\",\n                    type: \"button\",\n                    className: \"btn btn-dark dropdown-toggle\",\n                    value: message.id,\n                    \"data-bs-toggle\": \"dropdown\",\n                    \"aria-haspopup\": \"true\",\n                    \"aria-expanded\": \"false\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"dropdown-menu\",\n                    \"aria-labelledby\": \"btnGroupDrop4\",\n                    children: [/*#__PURE__*/_jsxDEV(Link, {\n                      to: {\n                        pathname: \"/ModifyMessage/\" + message.id\n                      },\n                      className: \"dropdown-item\",\n                      children: \"Modifier le message\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 223,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"dropdown-item\",\n                      onClick: () => this.HandleDeleteMessage(message.id),\n                      children: \"Supprimer le message\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 231,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 222,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true);\n    }\n  }\n\n}\n\nexport default PageMessage;","map":{"version":3,"sources":["/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/pageMessages.js"],"names":["React","Entete","PostMessages","axios","Link","classes","Connexion","PageMessage","Component","state","ilLoaded","messagess","imageSaisi","auteurSaisi","messageSaisi","createdAtSaisi","updatedAtSaisi","id","selectedFile","postImage","display","userConnected","password","idUserConnected","componentDidMount","get","then","reponse","data","map","message","auteur","photo","createdAt","updatedAt","created","setState","catch","error","console","log","setInterval","Date","now","postMessages","imageUploaded","newMessage","post","ImageName","name","split","join","fd","FormData","append","res","nomImage","nom","HandleDeleteMessage","messageIndex","findIndex","l","newmessagess","splice","pathWithID","delete","Connect","Ids","status","localStorage","userId","token","deconnect","render","event","target","value","slice","reverse","index","lienImage","props","pathname"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Entete from \"../components/entete/entete\";\nimport PostMessages from \"./postMessage/postMessage\";\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\nimport classes from \"./pageMessages.module.css\"\nimport Connexion from \"./connexion/Connexion.js\";\n\n\nclass PageMessage extends React.Component {\n\n    state = {\n\n        //Affichage des messages\n        ilLoaded : false,\n        messagess : [],\n\n        \n        //Post\n        imageSaisi : \"\",\n        auteurSaisi : \"Kévin\",\n        messageSaisi : \"\",\n        createdAtSaisi : \"\",\n        updatedAtSaisi : \"\",\n        id : 0,\n\n        // Gestion des images \n        selectedFile : null,\n\n        // affichage d'une image dans le post \n        postImage : \"\",\n\n        // Connexion \n        display : false,\n        userConnected : \"\",\n        password :\"\",\n        idUserConnected : 0\n    }\n    \n    // Fonction de liaison avec la BDD\n    componentDidMount = () => {\n        // Appeler tous les messages dans la BDD \n        axios.get(\"http://localhost:8000/\")\n        .then(reponse => {\n            const messagess = reponse.data.data.map(message => {\n                return{\n                    id: message.id,\n                    auteur: message.auteur,\n                    photo: message.photo,\n                    message: message.message,\n                    createdAt: message.createdAt,\n                    updatedAt: message.updatedAt,\n                    created : message.created\n                }\n        })\n        this.setState({messagess})\n    })    \n        .catch(error => {\n            console.log(error)\n        },1000)\n\n        // Mettre à jour l'heure actuelle dans les states\n        setInterval( () => {\n            this.setState({\n              createdAtSaisi : Date.now() - (7 * 24 * 60 * 60 * 1000),\n              updatedAtSaisi : Date.now() - (7 * 24 * 60 * 60 * 1000),\n              created : Date.now() - (7 * 24 * 60 * 60 * 1000)\n            })\n\n            axios.get(\"http://localhost:8000/\")\n            .then(reponse => {\n                const messagess = reponse.data.data.map(message => {\n                    return{\n                        id: message.id,\n                        auteur: message.auteur,\n                        photo: message.photo,\n                        message: message.message,\n                        createdAt: message.createdAt,\n                        updatedAt: message.updatedAt,\n                        created : message.created,\n                    }\n            })\n            this.setState({messagess})\n        })    \n            .catch(error => {\n                console.log(error)\n            },1000)\n\n\n          },1000)\n    }\n\n\n    // Poster un nouveau message \n    postMessages = (imageUploaded) => {\n\n        if(imageUploaded === \"\"){\n            console.log(\"l'image envoyée \", imageUploaded)\n\n            /* Je prépare mon nouveau message pour les states et la base de données */\n            const newMessage = {\n                message : this.state.messageSaisi,\n                photo : 'photo pourrie',\n                auteur : this.state.auteurSaisi,\n                createdAt : this.state.createdAtSaisi,\n                updatedAt : this.state.updatedAtSaisi,\n                created : this.state.createdAtSaisi,\n            }\n            /* Envoi vers la base de donnée */\n            axios.post('http://localhost:8000/createMessage/', newMessage)        \n        } else { // S'il y a une image, j'importe l'image via une seconde route\n\n                const ImageName = Date.now() + imageUploaded.name.split(\" \").join(\"_\")\n                console.log(\"ImageName\" , ImageName)\n                const fd = new FormData()\n                fd.append('image', imageUploaded, ImageName)\n                console.log('fd', fd)\n\n\n                axios.post(\"http://localhost:8000/upload/\", fd)\n                    .then(res => { // J'utilise le retour de cette image \n                        console.log(\"1er retour : \",res)\n                        const nomImage = imageUploaded.name\n                        console.log(nomImage)\n                            const newMessage = {\n                                message : this.state.messageSaisi,\n                                photo : res.data.nom,\n                                auteur : this.state.auteurSaisi,\n                                createdAt : this.state.createdAtSaisi,\n                                updatedAt : this.state.updatedAtSaisi,\n                                created : this.state.createdAtSaisi,\n                            }\n                            /* Envoi vers la base de donnée */\n                            axios.post('http://localhost:8000/createMessage/', newMessage) \n                    })\n                }\n            }                           \n\n    // Supprimer un message\n    HandleDeleteMessage = (id) => {\n        const messageIndex = this.state.messagess.findIndex(l => {\n            return l.id === id\n        })\n        console.log(id)\n        // Supprime dans les states\n        const newmessagess = [...this.state.messagess]\n        newmessagess.splice(messageIndex, 1)\n\n        this.setState({messagess : newmessagess})\n        //Supprime dans la base de donnée\n        const pathWithID = `http://localhost:8000/delete/${id}`\n        console.log(pathWithID, \"l'id supprimé :\", id)\n\n        axios.delete(pathWithID, {\n             data: { id: id },\n        });\n    }\n\n    Connect = (Ids) => {\n\n        axios.post(\"http://localhost:8000/User/login\", data)\n            .then(res => {\n            console.log(res.data)\n             if(res.status === 200){\n                // Enregistrer l'id dans le local storage \n                localStorage.id = res.data.userId\n                localStorage.token = res.data.token\n                // Modifier le state pour afficher les postes \n                this.setState({display : true})\n            }\n          })  \n    }\n\n    deconnect = () => {\n        // Vider le local storage \n\n        // display a none\n    }\n\n\n    render(){\n\n        if(!this.state.display){ \n            return (    \n                <Connexion \n                    Connect={(Ids) => this.Connect(Ids)}\n                />\n            )\n        }else {\n\n\n        return(\n            <>\n                <Entete />         \n\n                <PostMessages \n                    envoi={(imageUploaded) => this.postMessages(imageUploaded)}\n                    value={this.state.messageSaisi}\n                    onChange={(event) => this.setState({messageSaisi:event.target.value})}\n                />\n                {/* Affichage de tous les messages postés du plus récent au plus vieux ! */} \n                {this.state.messagess.slice(0).reverse().map((message, index) => {\n                    const lienImage = `http://localhost:8000/images/${message.photo}`\n                    return(\n                        <div id={this.props.id} className=\"container \">\n                        <div className=\"row pull-left\">\n                                <div className=\" card border-success mb-3 w-75 col-10\"  >\n                                    <div className=\"card-header\">\n                                        {message.createdAt}\n                                    </div>\n                                    <div className=\"card-body\">\n                                        <h4 className=\"card-title\">{message.auteur}</h4>\n                                        <p className=\"card-text\">{message.message}</p>\n                                        <img src={lienImage} alt=\"\" />\n                                    </div>\n                                </div>\n                                {/* Bloc menu déroulant des Actions : Modifier et Supprimer */}\n                                <div className=\"btn-group col-1 h-25 \" role=\"group\" aria-label=\"Button group with nested dropdown\">\n                                <button type=\"button\" className=\"btn btn-dark\">Actions</button>\n                                <div className=\"btn-group\" role=\"group\">\n                                    <button id=\"btnGroupDrop4\" type=\"button\" className=\"btn btn-dark dropdown-toggle\" value={message.id} data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></button>\n                                    <div className=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop4\" >\n                                        <Link \n                                            to={{\n                                                pathname : \"/ModifyMessage/\"+(message.id),\n                                                }} \n                                            className=\"dropdown-item\" \n                                            >\n                                            Modifier le message \n                                        </Link> \n                                        <button className=\"dropdown-item\" onClick={() => this.HandleDeleteMessage(message.id)} >Supprimer le message</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div> \n                    )\n                })}\n            </>\n            )\n        }    \n    }\n    \n}\n\n\n\nexport default PageMessage"]},"metadata":{},"sourceType":"module"}