{"ast":null,"code":"var _jsxFileName = \"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/modifyMessage/modifyMessage.js\";\nimport React from \"react\";\nimport Bouton from \"../../components/bouton/bouton\";\nimport Input from \"../../components/bouton/input\";\nimport classes from \"./modifyMessage.module.css\";\nimport Entete from \"../entete/entete\";\nimport axios from \"axios\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ModifyMessage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      messagetoModify: [{\n        id: \"\",\n        auteur: \"\",\n        photo: \"\",\n        message: \"\",\n        createdAt: \"\",\n        updatedAt: \"\",\n        created: \"\"\n      }]\n    };\n\n    this.componentDidMount = () => {\n      let ID = this.props.match.params.id; // Appeler tous les messages dans la BDD \n\n      axios.get(`http://localhost:8000/byID/${ID}`).then(reponse => {\n        // On récupère l'ancien state vierge\n        const NewState = [...this.state.messagetoModify]; // J'ajoute toutes les données, l'ID récupéré du paramètre d'URL, le reste du serveur\n\n        NewState.id = ID;\n        NewState.auteur = reponse.data.data.auteur;\n        NewState.photo = reponse.data.data.photo;\n        NewState.message = reponse.data.data.message;\n        NewState.createdAt = reponse.data.data.createdAt;\n        NewState.updatedAt = reponse.data.data.updatedAt; // Je mets à jour mes states avec les données que j'ai récupérées du serveur\n\n        this.setState({\n          messagetoModify: NewState\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.confirmerModification = () => {\n      console.log('ok modification');\n    };\n  }\n\n  render() {\n    const classBloc = `${classes.modifyMessage} container w-100 `;\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Entete, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classBloc,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"exampleTextarea\",\n            className: \"form-label mt-4\",\n            children: \"Ecrivez votre message et cliquez sur postez pour qu'il se rajoute aux posts du forum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group col-8\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              id: \"exampleTextarea\",\n              rows: \"3\",\n              value: this.state.messagetoModify.message,\n              onChange: event => {\n                const newStates = [...this.state.messagetoModify];\n                newStates.message = event.target.value;\n                this.setState({\n                  messagetoModify: newStates\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group col-4\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              children: \" Parcourir\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Bouton, {\n              couleur: \"warning\",\n              type: \"button\",\n              clic: () => this.props.confirmerModification(),\n              children: \" Modifier \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default ModifyMessage;","map":{"version":3,"sources":["/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/modifyMessage/modifyMessage.js"],"names":["React","Bouton","Input","classes","Entete","axios","useParams","Link","ModifyMessage","Component","state","messagetoModify","id","auteur","photo","message","createdAt","updatedAt","created","componentDidMount","ID","props","match","params","get","then","reponse","NewState","data","setState","catch","error","console","log","confirmerModification","render","classBloc","modifyMessage","event","newStates","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Bouton from \"../../components/bouton/bouton\";\nimport Input from \"../../components/bouton/input\";\nimport classes from \"./modifyMessage.module.css\"\nimport Entete from \"../entete/entete\";\nimport axios from \"axios\"\nimport {useParams, Link} from \"react-router-dom\"\n\n\n\n\nclass ModifyMessage extends React.Component {\n    state = {\n        messagetoModify : [\n            {\n            id: \"\",\n            auteur: \"\",\n            photo: \"\",\n            message: \"\",\n            createdAt: \"\",\n            updatedAt: \"\",\n            created : \"\"\n        }\n    ],\n\n    }\n\n/* Récupérer les éléments du message à modifier en fonction de son id */\n    componentDidMount = () => {\n        let ID = this.props.match.params.id\n        // Appeler tous les messages dans la BDD \n        axios.get(`http://localhost:8000/byID/${ID}`)\n        .then(reponse => {\n            // On récupère l'ancien state vierge\n            const NewState = [...this.state.messagetoModify]\n            // J'ajoute toutes les données, l'ID récupéré du paramètre d'URL, le reste du serveur\n            NewState.id = ID\n            NewState.auteur = reponse.data.data.auteur\n            NewState.photo = reponse.data.data.photo\n            NewState.message = reponse.data.data.message\n            NewState.createdAt = reponse.data.data.createdAt\n            NewState.updatedAt = reponse.data.data.updatedAt\n            // Je mets à jour mes states avec les données que j'ai récupérées du serveur\n            this.setState({messagetoModify : NewState})\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    confirmerModification = () => {\n        console.log('ok modification')\n    }    \n\n            render(){\n                const classBloc = `${classes.modifyMessage} container w-100 `\n\n                console.log(this.state)\n\n                return (\n                    <>\n                    <Entete/>\n                    <form className={classBloc}>\n                        <div className='row'>\n                        <label htmlFor=\"exampleTextarea\" className=\"form-label mt-4\">Ecrivez votre message et cliquez sur postez pour qu'il se rajoute aux posts du forum</label>\n                            <div className=\"form-group col-8\">\n                                <textarea \n                                className=\"form-control\" \n                                id=\"exampleTextarea\" rows=\"3\" \n                                value={this.state.messagetoModify.message}\n                                onChange={(event) => {\n                                    const newStates = [...this.state.messagetoModify]\n                                    newStates.message = event.target.value\n                                    this.setState({messagetoModify : newStates})\n                                }}\n                                />\n                            </div>\n                            <div className=\"form-group col-4\">\n                                <Input> Parcourir</Input>\n                                <Bouton couleur=\"warning\" type=\"button\" clic={() => this.props.confirmerModification()}> Modifier </Bouton>\n                            </div>\n                        </div>\n                    </form>\n                    </> \n                )\n            }\n        }\n\nexport default ModifyMessage"]},"metadata":{},"sourceType":"module"}