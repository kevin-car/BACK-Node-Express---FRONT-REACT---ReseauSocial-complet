{"ast":null,"code":"var _jsxFileName = \"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/modifyMessage/modifyMessage.js\";\nimport React from \"react\";\nimport Bouton from \"../../components/bouton/bouton\";\nimport Input from \"../../components/bouton/input\";\nimport classes from \"./modifyMessage.module.css\";\nimport Entete from \"../../components/entete/entete\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { withFormik } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ModifyMessage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      let ID = this.props.match.params.id; // Appeler tous les messages dans la BDD \n\n      axios.get(`http://localhost:8000/byID/${ID}`).then(reponse => {\n        // On récupère l'ancien state vierge\n        const NewState = {}; // J'ajoute toutes les données, l'ID récupéré du paramètre d'URL, le reste du serveur\n\n        this.props.values.id = ID;\n        this.props.values.auteur = reponse.data.data.auteur;\n        this.props.values.photo = reponse.data.data.photo;\n        this.props.values.message = reponse.data.data.message;\n        this.props.values.createdAt = reponse.data.data.createdAt;\n        this.props.values.updatedAt = reponse.data.data.updatedAt; // Je mets à jour mes states avec les données que j'ai récupérées du serveur\n\n        const stateupdated = {\n          id: this.props.values.id,\n          auteur: this.props.values.auteur,\n          photo: this.props.values.photo,\n          message: this.props.values.message,\n          updatedAt: this.props.values.updatedAt\n        };\n        this.setState(stateupdated);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.confirmerModification = () => {\n      // Si la modification est sans Photo \n      if (!this.props.values.photo == \"\") {\n        // préparation de notre envoi au serveur Node\n        const messageModifie = {\n          message: this.props.values.message,\n          auteur: this.props.values.auteur,\n          photo: this.props.values.photo\n        };\n        let ID = this.props.match.params.id;\n        console.log(ID); // Envoi de notre modification à Node\n\n        axios.post(`http://localhost:8000/modifyMessage/${ID}`, messageModifie).then(function (reponse) {\n          console.log('modification envoyée au serveur');\n        }).then(error => {\n          console.log(\"front : il y a eu cette erreure\", error);\n        }); // Remettre à jour la liste des Messages sur la BDD\n\n        axios.get(\"http://localhost:8000/\").then(reponse => {\n          const messagess = reponse.data.data.map(message => {\n            return {\n              id: message.id,\n              auteur: message.auteur,\n              photo: message.photo,\n              message: message.message,\n              createdAt: message.createdAt,\n              updatedAt: message.updatedAt,\n              created: message.created\n            };\n          });\n          this.setState({\n            messagess\n          });\n        });\n        this.setState({});\n      } else {}\n    };\n  }\n\n  render() {\n    const classBloc = `${classes.modifyMessage} container w-100 `;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Entete, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classBloc,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"exampleTextarea\",\n            className: \"form-label mt-4\",\n            children: \"Ecrivez votre message et cliquez sur postez pour qu'il se rajoute aux posts du forum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group col-8\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: \"message\",\n              className: \"form-control\",\n              id: \"exampleTextarea\",\n              rows: \"3\",\n              onChange: this.props.handleChange,\n              value: this.props.values.message,\n              defaultValue: this.props.values.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group col-4\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              children: \" Parcourir\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Bouton, {\n              className: \"\",\n              couleur: \"secondary\",\n              type: \"button\",\n              clic: () => this.confirmerModification(),\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/accueil/\",\n                children: \" MODIFIER \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Bouton, {\n              className: \"color-white\",\n              couleur: \"secondary\",\n              type: \"button\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/accueil/\",\n                children: \" Retour \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default withFormik({\n  mapPropsToValues: () => ({\n    id: \"\",\n    auteur: \"\",\n    photo: \"\",\n    message: \"\",\n    createdAt: \"\",\n    updatedAt: \"\",\n    created: \"\"\n  }),\n  validate: values => {// Contient les règles de validations\n  },\n  handleSubmit: (values, {\n    props\n  }) => {\n    this.confirmerModification();\n  }\n})(ModifyMessage);","map":{"version":3,"sources":["/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/modifyMessage/modifyMessage.js"],"names":["React","Bouton","Input","classes","Entete","axios","Link","withFormik","ModifyMessage","Component","componentDidMount","ID","props","match","params","id","get","then","reponse","NewState","values","auteur","data","photo","message","createdAt","updatedAt","stateupdated","setState","catch","error","console","log","confirmerModification","messageModifie","post","messagess","map","created","render","classBloc","modifyMessage","handleChange","mapPropsToValues","validate","handleSubmit"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Bouton from \"../../components/bouton/bouton\";\nimport Input from \"../../components/bouton/input\";\nimport classes from \"./modifyMessage.module.css\"\nimport Entete from \"../../components/entete/entete\";\nimport axios from \"axios\"\nimport { Link} from \"react-router-dom\"\nimport {withFormik} from \"formik\"\n\n\n\n\nclass ModifyMessage extends React.Component {\n   \n/* Récupérer les éléments du message à modifier en fonction de son id */\n    componentDidMount = () => {\n        let ID = this.props.match.params.id\n        // Appeler tous les messages dans la BDD \n        axios.get(`http://localhost:8000/byID/${ID}`)\n        .then(reponse => {\n            // On récupère l'ancien state vierge\n            const NewState = {}\n            // J'ajoute toutes les données, l'ID récupéré du paramètre d'URL, le reste du serveur\n            this.props.values.id = ID\n            this.props.values.auteur = reponse.data.data.auteur\n            this.props.values.photo = reponse.data.data.photo\n            this.props.values.message = reponse.data.data.message\n            this.props.values.createdAt = reponse.data.data.createdAt\n            this.props.values.updatedAt = reponse.data.data.updatedAt\n            // Je mets à jour mes states avec les données que j'ai récupérées du serveur\n            const stateupdated = {\n                id : this.props.values.id,\n                auteur : this.props.values.auteur,\n                photo : this.props.values.photo,\n                message : this.props.values.message,\n                updatedAt : this.props.values.updatedAt\n            } \n            this.setState(stateupdated)\n        })\n        .catch(error => {\n            console.log(error)\n        })\n\n    }\n\n\n    confirmerModification = () => {\n        // Si la modification est sans Photo \n        if(!this.props.values.photo == \"\") {\n            // préparation de notre envoi au serveur Node\n            const messageModifie = {\n                message : this.props.values.message,\n                auteur : this.props.values.auteur,\n                photo : this.props.values.photo,\n            }\n            let ID = this.props.match.params.id\n            console.log(ID)\n            // Envoi de notre modification à Node\n            axios.post(`http://localhost:8000/modifyMessage/${ID}`,\n                messageModifie\n            )\n            .then(function(reponse) {\n                console.log('modification envoyée au serveur')\n            })    \n            .then(error => {\n                console.log(\"front : il y a eu cette erreure\", error)\n            })\n            // Remettre à jour la liste des Messages sur la BDD\n            axios.get(\"http://localhost:8000/\")\n            .then(reponse => {\n                const messagess = reponse.data.data.map(message => {\n                    return{\n                        id: message.id,\n                        auteur: message.auteur,\n                        photo: message.photo,\n                        message: message.message,\n                        createdAt: message.createdAt,\n                        updatedAt: message.updatedAt,\n                        created : message.created\n                    }\n            })\n            this.setState({messagess})\n            })\n            this.setState({})\n        } else {\n\n        }\n        \n    }    \n\n    render(){\n        const classBloc = `${classes.modifyMessage} container w-100 `\n        return (\n                <>\n                <Entete/>\n                <form className={classBloc}>\n                    <div className='row'>\n                    <label htmlFor=\"exampleTextarea\" className=\"form-label mt-4\">Ecrivez votre message et cliquez sur postez pour qu'il se rajoute aux posts du forum</label>\n                        <div className=\"form-group col-8\">\n                            <textarea \n                            name='message'\n                            className=\"form-control\" \n                            id=\"exampleTextarea\" rows=\"3\" \n                            onChange={this.props.handleChange}\n                            value={this.props.values.message}\n                            defaultValue={this.props.values.message}\n                            />\n                        </div>\n                        <div className=\"form-group col-4\">\n                            <Input> Parcourir</Input>\n                            <Bouton className=\"\" couleur=\"secondary\" type=\"button\" clic={() => this.confirmerModification()}> \n                                <Link  to=\"/accueil/\"> MODIFIER </Link>\n                            </Bouton>\n                            <Bouton className=\"color-white\" couleur=\"secondary\" type=\"button\"  > \n                                <Link to=\"/accueil/\"> Retour </Link>\n                            </Bouton>\n                        </div>\n                    </div>\n                </form>\n            </> \n        )\n    }\n}\nexport default withFormik({\n\n    mapPropsToValues : () => ({\n            id: \"\",\n            auteur: \"\",\n            photo: \"\",\n            message: \"\",\n            createdAt: \"\",\n            updatedAt: \"\",\n            created : \"\"\n       }),\n    validate : values => {\n        // Contient les règles de validations\n    },\n    handleSubmit:(values, {props}) => {\n        this.confirmerModification()\n    }\n    \n    })(ModifyMessage)\n"]},"metadata":{},"sourceType":"module"}