{"ast":null,"code":"var _jsxFileName = \"/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/modifyMessage/modifyMessage.js\";\nimport React from \"react\";\nimport Bouton from \"../../components/bouton/bouton\";\nimport Input from \"../../components/bouton/input\";\nimport classes from \"./modifyMessage.module.css\";\nimport Entete from \"../../components/entete/entete\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { withFormik } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ModifyMessage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      let ID = this.props.match.params.id; // Appeler tous les messages dans la BDD \n\n      axios.get(`http://localhost:8000/byID/${ID}`).then(reponse => {\n        // On récupère l'ancien state vierge\n        const NewState = {}; // J'ajoute toutes les données, l'ID récupéré du paramètre d'URL, le reste du serveur\n\n        NewState.id = ID;\n        NewState.auteur = reponse.data.data.auteur;\n        NewState.photo = reponse.data.data.photo;\n        NewState.message = reponse.data.data.message;\n        NewState.createdAt = reponse.data.data.createdAt;\n        NewState.updatedAt = reponse.data.data.updatedAt; // Je mets à jour mes states avec les données que j'ai récupérées du serveur\n\n        this.setState({\n          messagetoModify: NewState\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.confirmerModification = () => {\n      // Si la modification est sans Photo \n      if (!this.props.values.messagetoModify.photo) {\n        // préparation de notre envoi au serveur Node\n        const messageModifie = {\n          message: this.props.values.messagetoModify.message,\n          auteur: this.props.values.messagetoModify.auteur,\n          photo: this.props.values.messagetoModify.photo\n        };\n        let ID = this.props.match.params.id;\n        console.log(ID); // Envoi de notre modification à Node\n\n        axios.post(`http://localhost:8000/modifyMessage/${ID}`, messageModifie).then(function (reponse) {\n          console.log('modification envoyée au serveur');\n        }).then(error => {\n          console.log(\"front : il y a eu cette erreure\", error);\n        }); // Remettre à jour la liste des Messages sur la BDD\n\n        axios.get(\"http://localhost:8000/\").then(reponse => {\n          const messagess = reponse.data.data.map(message => {\n            return {\n              id: message.id,\n              auteur: message.auteur,\n              photo: message.photo,\n              message: message.message,\n              createdAt: message.createdAt,\n              updatedAt: message.updatedAt,\n              created: message.created\n            };\n          });\n          this.setState({\n            messagess\n          });\n        });\n        this.setState({});\n      } else {}\n    };\n  }\n\n  render() {\n    const classBloc = `${classes.modifyMessage} container w-100 `;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Entete, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classBloc,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"exampleTextarea\",\n            className: \"form-label mt-4\",\n            children: \"Ecrivez votre message et cliquez sur postez pour qu'il se rajoute aux posts du forum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group col-8\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: \"message\",\n              className: \"form-control\",\n              id: \"exampleTextarea\",\n              rows: \"3\",\n              value: this.props.values.message,\n              onChange: event => {\n                const newStates = [...this.props.values.messagetoModify];\n                newStates.message = event.target.value;\n                this.setState({\n                  messagetoModify: newStates\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group col-4\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              children: \" Parcourir\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Bouton, {\n              className: \"\",\n              couleur: \"secondary\",\n              type: \"button\",\n              clic: () => this.confirmerModification(),\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/accueil/\",\n                children: \" MODIFIER \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Bouton, {\n              className: \"color-white\",\n              couleur: \"secondary\",\n              type: \"button\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/accueil/\",\n                children: \" Retour \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default withFormik({\n  mapPropsToValues: () => ({\n    id: \"\",\n    auteur: \"\",\n    photo: \"\",\n    message: \"\",\n    createdAt: \"\",\n    updatedAt: \"\",\n    created: \"\"\n  }),\n  validate: values => {// Contient les règles de validations\n  },\n  handleSubmit: (values, {\n    props\n  }) => {// Validation du formulaire en question\n  }\n})(ModifyMessage);","map":{"version":3,"sources":["/Users/kevincarpentier/Library/Mobile Documents/com~apple~CloudDocs/Sites /PRojet 7 v2/frontend/src/container/modifyMessage/modifyMessage.js"],"names":["React","Bouton","Input","classes","Entete","axios","Link","withFormik","ModifyMessage","Component","componentDidMount","ID","props","match","params","id","get","then","reponse","NewState","auteur","data","photo","message","createdAt","updatedAt","setState","messagetoModify","catch","error","console","log","confirmerModification","values","messageModifie","post","messagess","map","created","render","classBloc","modifyMessage","event","newStates","target","value","mapPropsToValues","validate","handleSubmit"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Bouton from \"../../components/bouton/bouton\";\nimport Input from \"../../components/bouton/input\";\nimport classes from \"./modifyMessage.module.css\"\nimport Entete from \"../../components/entete/entete\";\nimport axios from \"axios\"\nimport { Link} from \"react-router-dom\"\nimport {withFormik} from \"formik\"\n\n\n\n\nclass ModifyMessage extends React.Component {\n   /*  state = {\n        messagetoModify : [\n            {\n            id: \"\",\n            auteur: \"\",\n            photo: \"\",\n            message: \"\",\n            createdAt: \"\",\n            updatedAt: \"\",\n            created : \"\"\n        }\n    ],\n\n    } */\n\n/* Récupérer les éléments du message à modifier en fonction de son id */\n    componentDidMount = () => {\n        let ID = this.props.match.params.id\n        // Appeler tous les messages dans la BDD \n        axios.get(`http://localhost:8000/byID/${ID}`)\n        .then(reponse => {\n            // On récupère l'ancien state vierge\n            const NewState = {}\n            // J'ajoute toutes les données, l'ID récupéré du paramètre d'URL, le reste du serveur\n            NewState.id = ID\n            NewState.auteur = reponse.data.data.auteur\n            NewState.photo = reponse.data.data.photo\n            NewState.message = reponse.data.data.message\n            NewState.createdAt = reponse.data.data.createdAt\n            NewState.updatedAt = reponse.data.data.updatedAt\n            // Je mets à jour mes states avec les données que j'ai récupérées du serveur\n            this.setState({messagetoModify : NewState})\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n\n    confirmerModification = () => {\n        // Si la modification est sans Photo \n        if(!this.props.values.messagetoModify.photo) {\n            // préparation de notre envoi au serveur Node\n            const messageModifie = {\n                message : this.props.values.messagetoModify.message,\n                auteur : this.props.values.messagetoModify.auteur,\n                photo : this.props.values.messagetoModify.photo,\n            }\n            let ID = this.props.match.params.id\n            console.log(ID)\n            // Envoi de notre modification à Node\n            axios.post(`http://localhost:8000/modifyMessage/${ID}`,\n                messageModifie\n            )\n            .then(function(reponse) {\n                console.log('modification envoyée au serveur')\n            })    \n            .then(error => {\n                console.log(\"front : il y a eu cette erreure\", error)\n            })\n            // Remettre à jour la liste des Messages sur la BDD\n            axios.get(\"http://localhost:8000/\")\n            .then(reponse => {\n                const messagess = reponse.data.data.map(message => {\n                    return{\n                        id: message.id,\n                        auteur: message.auteur,\n                        photo: message.photo,\n                        message: message.message,\n                        createdAt: message.createdAt,\n                        updatedAt: message.updatedAt,\n                        created : message.created\n                    }\n            })\n            this.setState({messagess})\n            })\n            this.setState({})\n        } else {\n\n        }\n        \n    }    \n\n    render(){\n        const classBloc = `${classes.modifyMessage} container w-100 `\n        return (\n                <>\n                <Entete/>\n                <form className={classBloc}>\n                    <div className='row'>\n                    <label htmlFor=\"exampleTextarea\" className=\"form-label mt-4\">Ecrivez votre message et cliquez sur postez pour qu'il se rajoute aux posts du forum</label>\n                        <div className=\"form-group col-8\">\n                            <textarea \n                            name='message'\n                            className=\"form-control\" \n                            id=\"exampleTextarea\" rows=\"3\" \n                            value={this.props.values.message}\n                            onChange={(event) => {\n                                const newStates = [...this.props.values.messagetoModify]\n                                newStates.message = event.target.value\n                                this.setState({messagetoModify : newStates})\n                            }}\n                            />\n                        </div>\n                        <div className=\"form-group col-4\">\n                            <Input> Parcourir</Input>\n                            <Bouton className=\"\" couleur=\"secondary\" type=\"button\" clic={() => this.confirmerModification()}> \n                                <Link  to=\"/accueil/\"> MODIFIER </Link>\n                            </Bouton>\n                            <Bouton className=\"color-white\" couleur=\"secondary\" type=\"button\"  > \n                                <Link to=\"/accueil/\"> Retour </Link>\n                            </Bouton>\n                        </div>\n                    </div>\n                </form>\n            </> \n        )\n    }\n}\nexport default withFormik({\n\n    mapPropsToValues : () => ({\n            \n            id: \"\",\n            auteur: \"\",\n            photo: \"\",\n            message: \"\",\n            createdAt: \"\",\n            updatedAt: \"\",\n            created : \"\"\n       }),\n    validate : values => {\n        // Contient les règles de validations\n    },\n    handleSubmit:(values, {props}) => {\n        // Validation du formulaire en question\n    }\n    \n    })(ModifyMessage)\n"]},"metadata":{},"sourceType":"module"}